rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - authenticated users can read/write their own data
    match /users/{userId} {
      allow read: if true; // Anyone can read user profiles (for discovery)
      allow write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && (
        request.auth.uid == userId || // User updating their own profile
        // Allow other users to update follower/following counts and arrays
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followersCount', 'followingCount', 'followers', 'following'])
      );
      allow delete: if request.auth != null && request.auth.uid == userId;
      
      // User's saved reels subcollection - FIXED
      match /savedReels/{reelId} {
        allow read, write, create, update, delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // User's saved posts subcollection - NEW
      match /savedPosts/{postId} {
        allow read, write, create, update, delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // User's unread chats subcollection - ENHANCED for messaging/sharing
      match /unreadChats/{chatId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null && (
          request.auth.uid == userId || // User can update their own unread status
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants // Chat participants can update
        );
        allow create: if request.auth != null;
        allow update: if request.auth != null && (
          request.auth.uid == userId || // User can update their own unread status
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants // Chat participants can update
        );
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Usernames collection - PUBLIC READ for username checking
    // This collection stores username -> userId mappings for availability checking
    match /usernames/{username} {
      allow read: if true; // PUBLIC READ - allows checking username availability without authentication
      allow write: if request.auth != null; // Only authenticated users can reserve usernames
      allow create: if request.auth != null && 
                    request.resource.data.uid == request.auth.uid; // Users can only create entries for themselves
      allow update: if false; // Usernames cannot be updated once created
      allow delete: if request.auth != null && 
                    resource.data.uid == request.auth.uid; // Users can only delete their own username reservations
    }
    
    // Posts collection - ENHANCED to allow like updates from any user
    match /posts/{postId} {
      allow read: if true; // Anyone can read posts
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.userId || // Post owner can update everything
        // ANY authenticated user can update like/comment/view counts
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likesCount', 'commentsCount', 'viewsCount', 'updatedAt'])
      );
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Post likes subcollection - NEW
      match /likes/{likeId} {
        allow read: if true;
        allow write: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == likeId;
        allow update: if request.auth != null && request.auth.uid == likeId;
        allow delete: if request.auth != null && request.auth.uid == likeId;
      }
      
      // Post comments subcollection - NEW
      match /comments/{commentId} {
        allow read: if true;
        allow write: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth != null;
        allow delete: if request.auth != null;
      }
    }
    
    // Stories collection - ENHANCED
    match /stories/{storyId} {
      allow read: if true; // Anyone can read stories
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.userId || // Story owner
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['viewsCount', 'viewers', 'viewedBy', 'likesCount', 'views']) // âœ… FIXED: Added viewedBy
      );
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Story views subcollection - NEW for tracking views
      match /views/{viewId} {
        allow read: if true;
        allow write: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth != null;
        allow delete: if request.auth != null;
      }
    }
    
    // Story likes collection
    match /story_likes/{likeId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Reels collection - ENHANCED to allow like updates from any user
    match /reels/{reelId} {
      allow read: if true; // Anyone can read reels
      allow write: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.userId || // Reel owner can update everything
        // ANY authenticated user can update like/comment/view counts
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likesCount', 'commentsCount', 'viewsCount', 'updatedAt'])
      );
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Reels likes subcollection - ENHANCED
      match /likes/{likeId} {
        allow read: if true;
        allow write: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == likeId;
        allow update: if request.auth != null && request.auth.uid == likeId;
        allow delete: if request.auth != null && request.auth.uid == likeId;
      }
      
      // Reels comments subcollection - NEW
      match /comments/{commentId} {
        allow read: if true;
        allow write: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth != null;
        allow delete: if request.auth != null;
      }
      
      // Reels views subcollection - NEW
      match /views/{viewId} {
        allow read: if true;
        allow write: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth != null;
        allow delete: if request.auth != null;
      }
    }
    
    // Comments collection
    match /comments/{commentId} {
      allow read: if true; // Anyone can read comments
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Likes collection
    match /likes/{likeId} {
      allow read: if true;
      allow write: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }
    
    // Saves collection
    match /saves/{saveId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }
    
    // Following/Followers collections
    match /following/{followId} {
      allow read: if true; // Public follow relationships
      allow write: if request.auth != null && request.auth.uid == request.resource.data.followerId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.followerId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.followerId;
    }
    
    match /followers/{followId} {
      allow read: if true; // Public follow relationships
      allow write: if request.auth != null && request.auth.uid == request.resource.data.followerId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.followerId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.followerId;
    }
    
    // Chats collection - ENHANCED for sharing
    match /chats/{chatId} {
      allow read: if request.auth != null && (
        request.auth.uid in resource.data.participants ||
        // Allow reading for potential participants (for sharing)
        request.auth.uid in request.resource.data.participants
      );
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      allow update: if request.auth != null && (
        request.auth.uid in resource.data.participants ||
        // Allow any authenticated user to update chat metadata for sharing
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastMessage', 'lastMessageTime', 'lastMessageType', 'updatedAt'])
      );
      allow delete: if request.auth != null && request.auth.uid in resource.data.participants;
      
      // Messages subcollection for InstagramMessagingService
      match /messages/{messageId} {
        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.senderId;
        allow update: if request.auth != null && (
          request.auth.uid == resource.data.senderId ||
          request.auth.uid == resource.data.recipientId ||
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead', 'readBy'])
        );
        allow delete: if request.auth != null && (
          request.auth.uid == resource.data.senderId ||
          request.auth.uid == resource.data.recipientId
        );
      }
    }
    
    // Messages collection - ENHANCED for sharing
    match /messages/{messageId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.recipientId ||
        request.auth.uid in resource.data.participants
      );
      allow create: if request.auth != null && request.auth.uid == request.resource.data.senderId;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.recipientId ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead', 'readBy'])
      );
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.recipientId
      );
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.recipientId;
      allow write: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.recipientId || // User can mark their notifications as read
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']) // Only allow read status updates
      );
      allow delete: if request.auth != null && request.auth.uid == resource.data.recipientId;
    }
    
    // Calls collection for WebRTC functionality
    match /calls/{callId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId
      );
      allow write: if request.auth != null && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId
      );
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.callerId ||
        request.auth.uid == request.resource.data.receiverId
      );
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId
      );
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId
      );
      
      // ICE candidates subcollection for WebRTC signaling
      match /iceCandidates/{candidateId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth != null;
        allow delete: if request.auth != null;
      }
    }
    
    // WebRTC signaling collection for call offers/answers/ice candidates
    match /signaling/{signalingId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }
    
    // Call history collection
    match /callHistory/{historyId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId
      );
      allow write: if request.auth != null && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId
      );
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.callerId ||
        request.auth.uid == request.resource.data.receiverId
      );
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId
      );
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.calleeId
      );
    }
    
    // Blocked users collection
    match /blocks/{blockId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.blockerId;
      allow write: if request.auth != null && request.auth.uid == request.resource.data.blockerId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.blockerId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.blockerId;
    }
    
    // Reports collection
    match /reports/{reportId} {
      allow read: if false; // Only admins can read reports
      allow write: if request.auth != null && request.auth.uid == request.resource.data.reporterId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.reporterId;
      allow update: if false; // Reports cannot be updated
      allow delete: if false; // Reports cannot be deleted by users
    }
    
    // Analytics collection (for app metrics)
    match /analytics/{document} {
      allow read: if false; // Only admins can read analytics
      allow write: if request.auth != null; // Allow writing anonymous analytics
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if false;
    }
    
    // Likes collection - ENHANCED for Real-Time Like System
    // Document ID format: {contentId}_{userId}
    match /likes/{likeDocId} {
      allow read: if true; // Anyone can read likes for displaying counts and UI
      allow write: if request.auth != null; // Only authenticated users can like/unlike
      allow create: if request.auth != null; // Users can create their own like documents
      allow update: if request.auth != null; // Users can update their own like documents
      allow delete: if request.auth != null; // Users can delete their own like documents
    }
    
    // User Likes collection - ENHANCED for Real-Time Like System
    match /userLikes/{userContentId} {
      allow read: if true; // Anyone can read individual likes for displaying UI
      allow write: if request.auth != null; // Simplified for better compatibility
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }
    
    // User Presence collection - for video call signaling
    match /userPresence/{userId} {
      allow read: if request.auth != null; // Authenticated users can read presence
      allow write: if request.auth != null && request.auth.uid == userId; // Users can only update their own presence
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Reel Views collection - for Perfect View Tracking System
    match /reelViews/{viewId} {
      allow read: if request.auth != null; // Authenticated users can read view data
      allow write: if request.auth != null; // Authenticated users can write view data
      allow create: if request.auth != null; // Users can create view records
      allow update: if request.auth != null; // Users can update view records
      allow delete: if request.auth != null; // Users can delete view records
    }
    
    // Catch-all rule - deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
